[
  {"name": "for","language": "C++","snippet": "for(### $$$=%%%; $$$<{{for_end}}; $$$++){\n{{inside_block}}\n}"},
  {"name": "forr","language": "C++","snippet": "for(### $$$=%%%; $$$>={{for_end}}; $$$--){\n{{inside_block}}\n}"},
  {"name": "for_end","language": "C++","snippet": "%%%"},
  {"name": "forin","language": "C++","snippet": "for(auto&& $$$: %%%){\n{{inside_block}}\n}"},
  {"name": "if","language": "C++","snippet": "if($$$){\n{{inside_block}}\n}"},
  {"name": "while","language": "C++","snippet": "while($$$){\n{{inside_block}}\n}"},
  {"name": "switch","language": "C++","snippet": "switch($$$){\n{{wide_inside_block}}\n}"},
  {"name": "case","language": "C++","snippet": "case $$$:\n{{inside_block}}\n\tbreak;{{opt_case}}"},
  {"name": "opt_case","language": "C++","snippet": "\ncase $$$:\n{{inside_block}}\n\tbreak;{{opt_case}}"},
  {"name": "struct","language": "C++","snippet": "struct !!!{{extend}} {\n{{wide_inside_block}}\n};"},
  {"name": "class","language": "C++","snippet": "class !!!{{extend}} {\n{{wide_inside_block}}\n};"},
  {"name": "extend","language": "C++","snippet": ": %%% :::{{opt_extend}}"},
  {"name": "opt_extend","language": "C++","snippet": ", %%% :::{{opt_extend}}"},
  {"name": "method","language": "C++","snippet": "public: ### @@@({{params}}){\n{{wide_inside_block}}\n}"},
  {"name": "pmethod","language": "C++","snippet": "private: ### @@@({{params}}){\n{{wide_inside_block}}\n}"},
  {"name": "nimethod","language": "C++","snippet": "public: ### @@@({{params}});"},
  {"name": "nipmethod","language": "C++","snippet": "private: ### @@@({{params}});"},
  {"name": "amethod","language": "C++","snippet": "public: ### @@@({{params}}) = 0;"},
  {"name": "apmethod","language": "C++","snippet": "private: ### @@@({{params}}) = 0;"},
  {"name": "constr","language": "C++","snippet": "public: {{?!!!}}({{params}}){\n{{wide_inside_block}}\n}"},
  {"name": "pconstr","language": "C++","snippet": "private: {{?!!!}}({{params}}){\n{{wide_inside_block}}\n}"},
  {"name": "niconstr","language": "C++","snippet": "public: {{?!!!}}({{params}});"},
  {"name": "nipconstr","language": "C++","snippet": "private: {{?!!!}}({{params}});"},
  {"name": "econstr","language": "C++","snippet": "public: {{?!!!}}({{params}}){}"},
  {"name": "epconstr","language": "C++","snippet": "private: {{?!!!}}({{params}}){}"},
  {"name": "func","language": "C++","snippet": "### @@@({{params}}){\n{{wide_inside_block}}\n}"},
  {"name": "params","language": "C++","snippet": "### $$${{opt_params}}"},
  {"name": "opt_params","language": "C++","snippet": ", ### $$${{opt_params}}"},
  {"name": "enum","language": "C++","snippet": "enum !!!{{enum_type}} {\n{{enum_body}}\n};"},
  {"name": "enum_body","language": "C++","snippet": "\t>>>{{opt_enum_body}}"},
  {"name": "opt_enum_body","language": "C++","snippet": ",\n\t>>>{{opt_enum_body}}"},
  {"name": "enum1","language": "C++","snippet": "enum !!!{{enum1_type}} { {{enum1_body}} };"},
  {"name": "enum1_body","language": "C++","snippet": ">>>{{opt_enum1_body}}"},
  {"name": "opt_enum1_body","language": "C++","snippet": ", >>>{{opt_enum1_body}}"},
  {"name": "template","language": "C++","snippet": "template <{{template_params}}>\n{{wide_block}}"},
  {"name": "template_params","language": "C++","snippet": "class ^^^{{opt_template_params}}"},
  {"name": "opt_template_params","language": "C++","snippet": ", class ^^^{{opt_template_params}}"},
  {"name": "methodi","language": "C++","snippet": "### !!!::@@@({{params}}){\n{{wide_inside_block}}\n}"},
  {"name": "constri","language": "C++","snippet": "!!!::!!!({{params}}){\n{{wide_inside_block}}\n}"},


  {"name": "inc","language": "C++","snippet": "#include \"$$$\""},
  {"name": "stdinc","language": "C++","snippet": "#include <$$$>"},

  {"name": "singleton","language": "C++","snippet": "method#{{?\\!\\!\\!}}\\&@getInstance>static {{?\\!\\!\\!}} instance;&return instance<block>epconstr&nipconstr#{{?\\!\\!\\!}} const\\&$origin&nipmethod#void@operator=#{{?\\!\\!\\!}} const\\&$origin<"},
  {"name": "compositeclass","language": "C++","snippet": "private\\: std\\:\\:vector\\<{{?\\:\\:\\:}}*\\> children;&method#void@add#{{?\\:\\:\\:}}$*item>children.puch_back(item);<"},
  {"name": "compositemethod","language": "C++","snippet": ">for#int$i%0%children.size()>children[i]-\\>{{?\\@\\@\\@}}();<<"}
]